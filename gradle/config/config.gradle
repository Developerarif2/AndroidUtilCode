apply from: "${rootDir.path}/gradle/util/utils.gradle"

gradle.ext {
    applicationId = 'com.blankj.androidutilcode'
    appName = 'Util'

    compileSdkVersion = 27
    minSdkVersion = 14
    targetSdkVersion = 27
    versionCode = 1_023_008
    versionName = '1.23.8'// E.g. 1.9.72 => 1,009,072

    bus = [
            isPublish: false,
            isDebug  : true,
            version  : '1.7',
            group    : 'com.blankj'
    ]

    // lib version
    kotlin_version = '1.3.10'
    support_version = '27.1.1'
    leakcanary_version = '1.6.3'

    dep = [
            plugin       : [
                    "com.android.tools.build:gradle:3.4.0",
                    "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version",
                    "com.github.dcendents:android-maven-gradle-plugin:2.1",// 上传到 maven
                    "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4",// 上传到 bintray
                    "tech.harmonysoft:traute-gradle:1.1.10",// 注解转非空判断
                    "com.blankj:bus-gradle-plugin:$bus.version",// 组件化 Static Bus
            ],

            // lib
            support      : [
                    appcompat_v7: "com.android.support:appcompat-v7:$support_version",
                    design      : "com.android.support:design:$support_version",
                    multidex    : "com.android.support:multidex:1.0.2",
            ],
            constraint   : "com.android.support.constraint:constraint-layout:1.1.3",
            kotlin       : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version",
            leakcanary   : [
                    android         : "com.squareup.leakcanary:leakcanary-android:$leakcanary_version",
                    android_no_op   : "com.squareup.leakcanary:leakcanary-android-no-op:$leakcanary_version",
                    support_fragment: "com.squareup.leakcanary:leakcanary-support-fragment:$leakcanary_version"
            ],
            free_proguard: "com.blankj:free-proguard:1.0.1",
            swipe_panel  : "com.blankj:swipe-panel:1.1",

            gson         : "com.google.code.gson:gson:2.8.2",
            glide        : "com.github.bumptech.glide:glide:4.7.1",
            retrofit     : "com.squareup.retrofit2:retrofit:2.4.0",
            javassist    : "org.javassist:javassist:3.24.0-GA",
            commons_io   : "commons-io:commons-io:2.5",

            junit        : "junit:junit:4.12",
            robolectric  : "org.robolectric:robolectric:4.2",
    ]

    module = [
            "buildSrc"         : [true, ":buildSrc", ""] as ModuleConfig,
            "bus-gradle-plugin": [true, ":bus-gradle-plugin", ""] as ModuleConfig,
            "launcher_app"     : [true, ":launcher:app", ""] as ModuleConfig,
            "launcher_pkg"     : [true, ":launcher:pkg", ""] as ModuleConfig,
            "lib_base"         : [true, ":lib:base", ""] as ModuleConfig,
            "subutil_app"      : [true, ":subutil:app", ""] as ModuleConfig,
            "subutil_lib"      : [true, ":subutil:lib", ""] as ModuleConfig,
            "subutil_pkg"      : [true, ":subutil:pkg", ""] as ModuleConfig,
            "utilcode_app"     : [true, ":utilcode:app", ""] as ModuleConfig,
            "utilcode_lib"     : [true, ":utilcode:lib", "com.blankj:utilcode:$versionName"] as ModuleConfig,
            "utilcode_pkg"     : [true, ":utilcode:pkg", ""] as ModuleConfig,
    ]

    fn = [
            includeModules: this.&includeModules,
    ]
}

def log(String msg) {
    println("----> ${msg} <----")
}

gradle.ext.Utils = [
        log: this.&log,
]

def includeModules() {// 根据 config 来 include 各 module
    gradle.ext.module.each { k, v ->
        if (v.isLocal) {
            include v.localPath
        }
    }
}

gradle.addBuildListener(new CustomListener())

class CustomListener implements BuildListener {

    private timings = []
    private File file

    @Override
    void buildStarted(Gradle gradle) {
        gradle.ext.Utils.log("buildStarted")

        gradle.addListener(new TaskExecutionListener() {

            @Override
            void beforeExecute(Task task) {
                gradle.ext.Utils.log("beforeExecute")
                task.ext.startTime = System.currentTimeMillis()
            }

            @Override
            void afterExecute(Task task, TaskState state) {
                gradle.ext.Utils.log("afterExecute")
                def ms = System.currentTimeMillis() - task.ext.startTime
                timings.add([ms, task.path])
            }
        })

        def sdf = new java.text.SimpleDateFormat("yyyy-MM-dd-HH-mm-ss")
        file = new File(rootProject.buildDir.getAbsolutePath(),
                "buildTime_" + sdf.format(new Date(System.currentTimeMillis())) + ".txt")
    }

    @Override
    void settingsEvaluated(Settings settings) {

    }

    @Override
    void projectsLoaded(Gradle gradle) {
        gradle.ext.Utils.log("projectsLoaded")
        gradle.ext.module.each { k, v ->// 动态把 module 添加到 dep 中
            gradle.ext.dep[k] = v.isLocal ? gradle.rootProject.project(v.localPath) : v.url
        }
        gradle.ext.Utils.log("addModules2Dep: " + gradle.ext.dep.toString())
    }

    @Override
    void projectsEvaluated(Gradle gradle) {
        gradle.ext.Utils.log("projectsEvaluated")
    }

    @Override
    void buildFinished(BuildResult result) {
        ArrayList<Long> array = new ArrayList()
        for (timing in timings) {
            if (timing[0] >= 100) {
                array.add(timing)
            }
        }
        if (!array.isEmpty()) {
            Collections.sort(array)
            StringBuilder sb = new StringBuilder()
            array.reverseEach {
                sb.append(String.format("%7sms  %s\n", it[0], it[1]))
            }
            def content = sb.toString()
            Utils.log(content)
            com.android.utils.FileUtils.writeToFile(file, content)
        }
    }
}

class ModuleConfig {
    boolean isLocal
    String localPath
    String url

    ModuleConfig(boolean isLocal, String localPath, String url) {
        this.isLocal = isLocal
        this.localPath = localPath
        this.url = url
    }

    @Override
    String toString() {
        return "ModuleConfig { " +
                "isLocal = '" + isLocal + "', " +
                "localPath = '" + localPath + "', " +
                "url = '" + url + "'" +
                " }\n"
    }
}
//./gradlew clean :utilcode:lib:bintrayUpload