import java.text.SimpleDateFormat

apply {
    plugin "com.android.application"
    plugin "kotlin-android"
    plugin "kotlin-android-extensions"
    if (!bus.isPublish) {
        plugin "com.blankj.bus"
    }
}

configSigning project
configApkName project

android {
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName
        applicationId rootProject.applicationId + suffix
        targetSdkVersion rootProject.targetSdkVersion
        multiDexEnabled true
        resValue "string", "app_name", rootProject.appName + suffix
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }
}


dependencies {
    // LeakCanary
    debugImplementation dep.leakcanary.android
    debugImplementation dep.leakcanary.support_fragment
    releaseImplementation dep.leakcanary.android_no_op
}

private String getSuffix() {
    if (project.name == "launcher-app") return ""
    String[] splits = project.name.split("-")
    String suffix = ""
    if (splits.length == 2) {
        suffix = "_" + splits[0]
    }
    return suffix
}

def configSigning(Project pro) {

    File signPropertiesFile = file("${rootDir.path}/sign/keystore.properties")
    if (!signPropertiesFile.exists()) return

    println "$pro.name config sign start..."
    pro.android {
        Properties properties = new Properties()
        properties.load(new FileInputStream(signPropertiesFile))
        signingConfigs {
            release {
                storeFile new File(signPropertiesFile.getParent(), properties['keystore'])
                storePassword properties['storePassword']
                keyAlias properties['keyAlias']
                keyPassword properties['keyPassword']
            }
        }
        buildTypes.release.signingConfig signingConfigs.release
    }
    println "$pro.name config sign end..."
}

def configApkName(Project pro) {
    pro.android.applicationVariants.all { variant ->
        if (variant.buildType.name != "debug") {
            variant.getPackageApplicationProvider().get().outputDirectory = new File("${rootDir.path}/apk")
            variant.getPackageApplicationProvider().get().outputScope.apkDatas.forEach { apkData ->
                apkData.outputFileName = "util" + suffix +
                        "_" + variant.versionName.replace(".", "_") +
                        ".apk"
            }
        }
    }
}


// 打印每一个任务的时间.
class TimingsListener implements TaskExecutionListener, BuildListener {
    private long startTime
    private timings = []
    private String filePath

    TimingsListener(String filePath) {
        this.filePath = filePath
    }

    @Override
    void beforeExecute(Task task) {
        startTime = System.currentTimeMillis()
    }

    @Override
    void afterExecute(Task task, TaskState taskState) {
        def ms = System.currentTimeMillis() - startTime
        timings.add([ms, task.path])
    }

    @Override
    void buildFinished(BuildResult result) {
        ArrayList array = new ArrayList()
        for (timing in timings) {
            if (timing[0] >= 100) {
                array.add(timing)
            }
        }
        try {
            if (!array.isEmpty()) {
                Collections.sort(array, new Comparator() {
                    @Override
                    int compare(Object o1, Object o2) {
                        return o2[0] - o1[0]
                    }
                })
                println "Task timings:"
                FileWriter fw = new FileWriter(new File(filePath), true)
                array.each {
                    fw.write(String.format("%7sms  %s\n", it[0], it[1]))
                    printf "%7sms  %s\n", it
                }
                fw.flush()
                fw.close()
            } else {
                new File(filePath).delete()
            }
        } catch (Exception e) {
        }
        array.clear()
    }

    @Override
    void buildStarted(Gradle gradle) {}

    @Override
    void projectsEvaluated(Gradle gradle) {}

    @Override
    void projectsLoaded(Gradle gradle) {}

    @Override
    void settingsEvaluated(Settings settings) {}
}

def sdf = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss")
def file = new File(rootProject.buildDir.getAbsolutePath(),
        "buildTime_" + sdf.format(new Date(System.currentTimeMillis())) + ".txt")
gradle.addListener(new TimingsListener(file.getAbsolutePath()))